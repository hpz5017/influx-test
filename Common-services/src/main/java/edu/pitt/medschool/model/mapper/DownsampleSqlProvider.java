package edu.pitt.medschool.model.mapper;

import edu.pitt.medschool.model.dto.Downsample;
import edu.pitt.medschool.model.dto.DownsampleExample.Criteria;
import edu.pitt.medschool.model.dto.DownsampleExample.Criterion;
import edu.pitt.medschool.model.dto.DownsampleExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class DownsampleSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table downsample
	 * @mbg.generated
	 */
	public String countByExample(DownsampleExample example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("downsample");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table downsample
	 * @mbg.generated
	 */
	public String deleteByExample(DownsampleExample example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("downsample");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table downsample
	 * @mbg.generated
	 */
	public String insertSelective(Downsample record) {
		SQL sql = new SQL();
		sql.INSERT_INTO("downsample");
		if (record.getAlias() != null) {
			sql.VALUES("alias", "#{alias,jdbcType=VARCHAR}");
		}
		if (record.getPeriod() != null) {
			sql.VALUES("period", "#{period,jdbcType=INTEGER}");
		}
		if (record.getDuration() != null) {
			sql.VALUES("duration", "#{duration,jdbcType=INTEGER}");
		}
		if (record.getOrigin() != null) {
			sql.VALUES("origin", "#{origin,jdbcType=INTEGER}");
		}
		if (record.getMinBin() != null) {
			sql.VALUES("min_bin", "#{minBin,jdbcType=INTEGER}");
		}
		if (record.getMinBinRow() != null) {
			sql.VALUES("min_bin_row", "#{minBinRow,jdbcType=INTEGER}");
		}
		if (record.getDownsampleFirst() != null) {
			sql.VALUES("downsample_first", "#{downsampleFirst,jdbcType=BIT}");
		}
		if (record.getCreateTime() != null) {
			sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdateTime() != null) {
			sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
		}
		if (record.getDeleted() != null) {
			sql.VALUES("deleted", "#{deleted,jdbcType=BIT}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table downsample
	 * @mbg.generated
	 */
	public String selectByExample(DownsampleExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("id");
		} else {
			sql.SELECT("id");
		}
		sql.SELECT("alias");
		sql.SELECT("period");
		sql.SELECT("duration");
		sql.SELECT("origin");
		sql.SELECT("min_bin");
		sql.SELECT("min_bin_row");
		sql.SELECT("downsample_first");
		sql.SELECT("create_time");
		sql.SELECT("update_time");
		sql.SELECT("deleted");
		sql.FROM("downsample");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table downsample
	 * @mbg.generated
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		Downsample record = (Downsample) parameter.get("record");
		DownsampleExample example = (DownsampleExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("downsample");
		if (record.getId() != null) {
			sql.SET("id = #{record.id,jdbcType=INTEGER}");
		}
		if (record.getAlias() != null) {
			sql.SET("alias = #{record.alias,jdbcType=VARCHAR}");
		}
		if (record.getPeriod() != null) {
			sql.SET("period = #{record.period,jdbcType=INTEGER}");
		}
		if (record.getDuration() != null) {
			sql.SET("duration = #{record.duration,jdbcType=INTEGER}");
		}
		if (record.getOrigin() != null) {
			sql.SET("origin = #{record.origin,jdbcType=INTEGER}");
		}
		if (record.getMinBin() != null) {
			sql.SET("min_bin = #{record.minBin,jdbcType=INTEGER}");
		}
		if (record.getMinBinRow() != null) {
			sql.SET("min_bin_row = #{record.minBinRow,jdbcType=INTEGER}");
		}
		if (record.getDownsampleFirst() != null) {
			sql.SET("downsample_first = #{record.downsampleFirst,jdbcType=BIT}");
		}
		if (record.getCreateTime() != null) {
			sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdateTime() != null) {
			sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
		}
		if (record.getDeleted() != null) {
			sql.SET("deleted = #{record.deleted,jdbcType=BIT}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table downsample
	 * @mbg.generated
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("downsample");
		sql.SET("id = #{record.id,jdbcType=INTEGER}");
		sql.SET("alias = #{record.alias,jdbcType=VARCHAR}");
		sql.SET("period = #{record.period,jdbcType=INTEGER}");
		sql.SET("duration = #{record.duration,jdbcType=INTEGER}");
		sql.SET("origin = #{record.origin,jdbcType=INTEGER}");
		sql.SET("min_bin = #{record.minBin,jdbcType=INTEGER}");
		sql.SET("min_bin_row = #{record.minBinRow,jdbcType=INTEGER}");
		sql.SET("downsample_first = #{record.downsampleFirst,jdbcType=BIT}");
		sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
		sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
		sql.SET("deleted = #{record.deleted,jdbcType=BIT}");
		DownsampleExample example = (DownsampleExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table downsample
	 * @mbg.generated
	 */
	public String updateByPrimaryKeySelective(Downsample record) {
		SQL sql = new SQL();
		sql.UPDATE("downsample");
		if (record.getAlias() != null) {
			sql.SET("alias = #{alias,jdbcType=VARCHAR}");
		}
		if (record.getPeriod() != null) {
			sql.SET("period = #{period,jdbcType=INTEGER}");
		}
		if (record.getDuration() != null) {
			sql.SET("duration = #{duration,jdbcType=INTEGER}");
		}
		if (record.getOrigin() != null) {
			sql.SET("origin = #{origin,jdbcType=INTEGER}");
		}
		if (record.getMinBin() != null) {
			sql.SET("min_bin = #{minBin,jdbcType=INTEGER}");
		}
		if (record.getMinBinRow() != null) {
			sql.SET("min_bin_row = #{minBinRow,jdbcType=INTEGER}");
		}
		if (record.getDownsampleFirst() != null) {
			sql.SET("downsample_first = #{downsampleFirst,jdbcType=BIT}");
		}
		if (record.getCreateTime() != null) {
			sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdateTime() != null) {
			sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
		}
		if (record.getDeleted() != null) {
			sql.SET("deleted = #{deleted,jdbcType=BIT}");
		}
		sql.WHERE("id = #{id,jdbcType=INTEGER}");
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table downsample
	 * @mbg.generated
	 */
	protected void applyWhere(SQL sql, DownsampleExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}
}