package edu.pitt.medschool.model.mapper;

import edu.pitt.medschool.model.dto.AggregationDb;
import edu.pitt.medschool.model.dto.AggregationDbExample.Criteria;
import edu.pitt.medschool.model.dto.AggregationDbExample.Criterion;
import edu.pitt.medschool.model.dto.AggregationDbExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class AggregationDbSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	public String countByExample(AggregationDbExample example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("aggregation_db");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	public String deleteByExample(AggregationDbExample example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("aggregation_db");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	public String insertSelective(AggregationDb record) {
		SQL sql = new SQL();
		sql.INSERT_INTO("aggregation_db");
		if (record.getVersion() != null) {
			sql.VALUES("version", "#{version,jdbcType=INTEGER}");
		}
		if (record.getCreateTime() != null) {
			sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getStatus() != null) {
			sql.VALUES("status", "#{status,jdbcType=VARCHAR}");
		}
		if (record.getTotal() != null) {
			sql.VALUES("total", "#{total,jdbcType=INTEGER}");
		}
		if (record.getFinished() != null) {
			sql.VALUES("finished", "#{finished,jdbcType=INTEGER}");
		}
		if (record.getArtype() != null) {
			sql.VALUES("arType", "#{artype,jdbcType=BIT}");
		}
		if (record.getTimeCost() != null) {
			sql.VALUES("time_cost", "#{timeCost,jdbcType=VARCHAR}");
		}
		if (record.getNday() != null) {
			sql.VALUES("nday", "#{nday,jdbcType=INTEGER}");
		}
		if (record.getComment() != null) {
			sql.VALUES("comment", "#{comment,jdbcType=VARCHAR}");
		}
		if (record.getDbSize() != null) {
			sql.VALUES("db_size", "#{dbSize,jdbcType=INTEGER}");
		}
		if (record.getPidList() != null) {
			sql.VALUES("pid_list", "#{pidList,jdbcType=LONGVARCHAR}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	public String selectByExampleWithBLOBs(AggregationDbExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("id");
		} else {
			sql.SELECT("id");
		}
		sql.SELECT("version");
		sql.SELECT("create_time");
		sql.SELECT("status");
		sql.SELECT("total");
		sql.SELECT("finished");
		sql.SELECT("arType");
		sql.SELECT("time_cost");
		sql.SELECT("nday");
		sql.SELECT("comment");
		sql.SELECT("db_size");
		sql.SELECT("pid_list");
		sql.FROM("aggregation_db");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	public String selectByExample(AggregationDbExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("id");
		} else {
			sql.SELECT("id");
		}
		sql.SELECT("version");
		sql.SELECT("create_time");
		sql.SELECT("status");
		sql.SELECT("total");
		sql.SELECT("finished");
		sql.SELECT("arType");
		sql.SELECT("time_cost");
		sql.SELECT("pid_list");
		sql.SELECT("nday");
		sql.SELECT("comment");
		sql.SELECT("db_size");
		sql.FROM("aggregation_db");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		AggregationDb record = (AggregationDb) parameter.get("record");
		AggregationDbExample example = (AggregationDbExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("aggregation_db");
		if (record.getId() != null) {
			sql.SET("id = #{record.id,jdbcType=INTEGER}");
		}
		if (record.getVersion() != null) {
			sql.SET("version = #{record.version,jdbcType=INTEGER}");
		}
		if (record.getCreateTime() != null) {
			sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getStatus() != null) {
			sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		}
		if (record.getTotal() != null) {
			sql.SET("total = #{record.total,jdbcType=INTEGER}");
		}
		if (record.getFinished() != null) {
			sql.SET("finished = #{record.finished,jdbcType=INTEGER}");
		}
		if (record.getArtype() != null) {
			sql.SET("arType = #{record.artype,jdbcType=BIT}");
		}
		if (record.getTimeCost() != null) {
			sql.SET("time_cost = #{record.timeCost,jdbcType=VARCHAR}");
		}
		if (record.getNday() != null) {
			sql.SET("nday = #{record.nday,jdbcType=INTEGER}");
		}
		if (record.getComment() != null) {
			sql.SET("comment = #{record.comment,jdbcType=VARCHAR}");
		}
		if (record.getDbSize() != null) {
			sql.SET("db_size = #{record.dbSize,jdbcType=INTEGER}");
		}
		if (record.getPidList() != null) {
			sql.SET("pid_list = #{record.pidList,jdbcType=LONGVARCHAR}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("aggregation_db");
		sql.SET("id = #{record.id,jdbcType=INTEGER}");
		sql.SET("version = #{record.version,jdbcType=INTEGER}");
		sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
		sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		sql.SET("total = #{record.total,jdbcType=INTEGER}");
		sql.SET("finished = #{record.finished,jdbcType=INTEGER}");
		sql.SET("arType = #{record.artype,jdbcType=BIT}");
		sql.SET("time_cost = #{record.timeCost,jdbcType=VARCHAR}");
		sql.SET("nday = #{record.nday,jdbcType=INTEGER}");
		sql.SET("comment = #{record.comment,jdbcType=VARCHAR}");
		sql.SET("db_size = #{record.dbSize,jdbcType=INTEGER}");
		sql.SET("pid_list = #{record.pidList,jdbcType=LONGVARCHAR}");
		AggregationDbExample example = (AggregationDbExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("aggregation_db");
		sql.SET("id = #{record.id,jdbcType=INTEGER}");
		sql.SET("version = #{record.version,jdbcType=INTEGER}");
		sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
		sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		sql.SET("total = #{record.total,jdbcType=INTEGER}");
		sql.SET("finished = #{record.finished,jdbcType=INTEGER}");
		sql.SET("arType = #{record.artype,jdbcType=BIT}");
		sql.SET("time_cost = #{record.timeCost,jdbcType=VARCHAR}");
		sql.SET("pid_list = #{record.pidList,jdbcType=LONGVARCHAR}");
		sql.SET("nday = #{record.nday,jdbcType=INTEGER}");
		sql.SET("comment = #{record.comment,jdbcType=VARCHAR}");
		sql.SET("db_size = #{record.dbSize,jdbcType=INTEGER}");
		AggregationDbExample example = (AggregationDbExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	public String updateByPrimaryKeySelective(AggregationDb record) {
		SQL sql = new SQL();
		sql.UPDATE("aggregation_db");
		if (record.getVersion() != null) {
			sql.SET("version = #{version,jdbcType=INTEGER}");
		}
		if (record.getCreateTime() != null) {
			sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getStatus() != null) {
			sql.SET("status = #{status,jdbcType=VARCHAR}");
		}
		if (record.getTotal() != null) {
			sql.SET("total = #{total,jdbcType=INTEGER}");
		}
		if (record.getFinished() != null) {
			sql.SET("finished = #{finished,jdbcType=INTEGER}");
		}
		if (record.getArtype() != null) {
			sql.SET("arType = #{artype,jdbcType=BIT}");
		}
		if (record.getTimeCost() != null) {
			sql.SET("time_cost = #{timeCost,jdbcType=VARCHAR}");
		}
		if (record.getNday() != null) {
			sql.SET("nday = #{nday,jdbcType=INTEGER}");
		}
		if (record.getPidList() != null) {
			sql.SET("pid_list = #{pidList,jdbcType=LONGVARCHAR}");
		}
		if (record.getComment() != null) {
			sql.SET("comment = #{comment,jdbcType=VARCHAR}");
		}
		if (record.getDbSize() != null) {
			sql.SET("db_size = #{dbSize,jdbcType=INTEGER}");
		}
		sql.WHERE("id = #{id,jdbcType=INTEGER}");
		return sql.toString();
	}
	
	
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	protected void applyWhere(SQL sql, AggregationDbExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}

}