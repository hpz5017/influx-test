package edu.pitt.medschool.model.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.ResultType;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;

import edu.pitt.medschool.controller.analysis.vo.ExportVO;
import edu.pitt.medschool.model.dto.Export;
import edu.pitt.medschool.model.dto.ExportExample;
import edu.pitt.medschool.model.dto.ExportWithBLOBs;

@Mapper
public interface ExportMapper {

    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@SelectProvider(type = ExportSqlProvider.class, method = "countByExample")
	long countByExample(ExportExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@DeleteProvider(type = ExportSqlProvider.class, method = "deleteByExample")
	int deleteByExample(ExportExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@Insert({ "insert into export (query_id, ar, ", "layout, finished, canceled, ", "failed, machine, db_type, ",
			"db_version, create_time, ", "update_time, deleted, ", "medical, username, finished_patient, ",
			"all_patient, from_db, ", "patient_list, query_json)",
			"values (#{queryId,jdbcType=INTEGER}, #{ar,jdbcType=BIT}, ",
			"#{layout,jdbcType=BIT}, #{finished,jdbcType=BIT}, #{canceled,jdbcType=BIT}, ",
			"#{failed,jdbcType=BIT}, #{machine,jdbcType=VARCHAR}, #{dbType,jdbcType=VARCHAR}, ",
			"#{dbVersion,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, ",
			"#{updateTime,jdbcType=TIMESTAMP}, #{deleted,jdbcType=BIT}, ",
			"#{medical,jdbcType=BIT}, #{username,jdbcType=VARCHAR}, #{finishedPatient,jdbcType=INTEGER}, ",
			"#{allPatient,jdbcType=INTEGER}, #{fromDb,jdbcType=VARCHAR}, ",
			"#{patientList,jdbcType=LONGVARCHAR}, #{queryJson,jdbcType=LONGVARCHAR})" })
	@SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Integer.class)
	int insert(ExportWithBLOBs record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@InsertProvider(type = ExportSqlProvider.class, method = "insertSelective")
	@SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Integer.class)
	int insertSelective(ExportWithBLOBs record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@SelectProvider(type = ExportSqlProvider.class, method = "selectByExampleWithBLOBs")
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER),
			@Result(column = "query_id", property = "queryId", jdbcType = JdbcType.INTEGER),
			@Result(column = "ar", property = "ar", jdbcType = JdbcType.BIT),
			@Result(column = "layout", property = "layout", jdbcType = JdbcType.BIT),
			@Result(column = "finished", property = "finished", jdbcType = JdbcType.BIT),
			@Result(column = "canceled", property = "canceled", jdbcType = JdbcType.BIT),
			@Result(column = "failed", property = "failed", jdbcType = JdbcType.BIT),
			@Result(column = "machine", property = "machine", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_type", property = "dbType", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_version", property = "dbVersion", jdbcType = JdbcType.VARCHAR),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "deleted", property = "deleted", jdbcType = JdbcType.BIT),
			@Result(column = "medical", property = "medical", jdbcType = JdbcType.BIT),
			@Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
			@Result(column = "finished_patient", property = "finishedPatient", jdbcType = JdbcType.INTEGER),
			@Result(column = "all_patient", property = "allPatient", jdbcType = JdbcType.INTEGER),
			@Result(column = "from_db", property = "fromDb", jdbcType = JdbcType.VARCHAR),
			@Result(column = "patient_list", property = "patientList", jdbcType = JdbcType.LONGVARCHAR),
			@Result(column = "query_json", property = "queryJson", jdbcType = JdbcType.LONGVARCHAR) })
	List<ExportWithBLOBs> selectByExampleWithBLOBsWithRowbounds(ExportExample example, RowBounds rowBounds);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@SelectProvider(type = ExportSqlProvider.class, method = "selectByExampleWithBLOBs")
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER),
			@Result(column = "query_id", property = "queryId", jdbcType = JdbcType.INTEGER),
			@Result(column = "ar", property = "ar", jdbcType = JdbcType.BIT),
			@Result(column = "layout", property = "layout", jdbcType = JdbcType.BIT),
			@Result(column = "finished", property = "finished", jdbcType = JdbcType.BIT),
			@Result(column = "canceled", property = "canceled", jdbcType = JdbcType.BIT),
			@Result(column = "failed", property = "failed", jdbcType = JdbcType.BIT),
			@Result(column = "machine", property = "machine", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_type", property = "dbType", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_version", property = "dbVersion", jdbcType = JdbcType.VARCHAR),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "deleted", property = "deleted", jdbcType = JdbcType.BIT),
			@Result(column = "medical", property = "medical", jdbcType = JdbcType.BIT),
			@Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
			@Result(column = "finished_patient", property = "finishedPatient", jdbcType = JdbcType.INTEGER),
			@Result(column = "all_patient", property = "allPatient", jdbcType = JdbcType.INTEGER),
			@Result(column = "from_db", property = "fromDb", jdbcType = JdbcType.VARCHAR),
			@Result(column = "patient_list", property = "patientList", jdbcType = JdbcType.LONGVARCHAR),
			@Result(column = "query_json", property = "queryJson", jdbcType = JdbcType.LONGVARCHAR) })
	List<ExportWithBLOBs> selectByExampleWithBLOBs(ExportExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@SelectProvider(type = ExportSqlProvider.class, method = "selectByExample")
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER),
			@Result(column = "query_id", property = "queryId", jdbcType = JdbcType.INTEGER),
			@Result(column = "ar", property = "ar", jdbcType = JdbcType.BIT),
			@Result(column = "layout", property = "layout", jdbcType = JdbcType.BIT),
			@Result(column = "finished", property = "finished", jdbcType = JdbcType.BIT),
			@Result(column = "canceled", property = "canceled", jdbcType = JdbcType.BIT),
			@Result(column = "failed", property = "failed", jdbcType = JdbcType.BIT),
			@Result(column = "machine", property = "machine", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_type", property = "dbType", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_version", property = "dbVersion", jdbcType = JdbcType.VARCHAR),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "deleted", property = "deleted", jdbcType = JdbcType.BIT),
			@Result(column = "medical", property = "medical", jdbcType = JdbcType.BIT),
			@Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
			@Result(column = "finished_patient", property = "finishedPatient", jdbcType = JdbcType.INTEGER),
			@Result(column = "all_patient", property = "allPatient", jdbcType = JdbcType.INTEGER),
			@Result(column = "from_db", property = "fromDb", jdbcType = JdbcType.VARCHAR) })
	List<Export> selectByExampleWithRowbounds(ExportExample example, RowBounds rowBounds);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@SelectProvider(type = ExportSqlProvider.class, method = "selectByExample")
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER),
			@Result(column = "query_id", property = "queryId", jdbcType = JdbcType.INTEGER),
			@Result(column = "ar", property = "ar", jdbcType = JdbcType.BIT),
			@Result(column = "layout", property = "layout", jdbcType = JdbcType.BIT),
			@Result(column = "finished", property = "finished", jdbcType = JdbcType.BIT),
			@Result(column = "canceled", property = "canceled", jdbcType = JdbcType.BIT),
			@Result(column = "failed", property = "failed", jdbcType = JdbcType.BIT),
			@Result(column = "machine", property = "machine", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_type", property = "dbType", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_version", property = "dbVersion", jdbcType = JdbcType.VARCHAR),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "deleted", property = "deleted", jdbcType = JdbcType.BIT),
			@Result(column = "medical", property = "medical", jdbcType = JdbcType.BIT),
			@Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
			@Result(column = "finished_patient", property = "finishedPatient", jdbcType = JdbcType.INTEGER),
			@Result(column = "all_patient", property = "allPatient", jdbcType = JdbcType.INTEGER),
			@Result(column = "from_db", property = "fromDb", jdbcType = JdbcType.VARCHAR) })
	List<Export> selectByExample(ExportExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@UpdateProvider(type = ExportSqlProvider.class, method = "updateByExampleSelective")
	int updateByExampleSelective(@Param("record") ExportWithBLOBs record, @Param("example") ExportExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@UpdateProvider(type = ExportSqlProvider.class, method = "updateByExampleWithBLOBs")
	int updateByExampleWithBLOBs(@Param("record") ExportWithBLOBs record, @Param("example") ExportExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	@UpdateProvider(type = ExportSqlProvider.class, method = "updateByExample")
	int updateByExample(@Param("record") Export record, @Param("example") ExportExample example);

	@Select({"SELECT e.id, e.ar, e.machine, e.create_time, d.alias, e.finished, e.finished_patient, e.all_patient FROM export e, downsample d WHERE e.query_id=d.id and e.medical=0 and e.deleted = 0 AND (e.machine = #{machineId,jdbcType=VARCHAR} or e.machine = 'realpsc')\r\n" +
			"union \r\n" + 
			"SELECT e.id, e.ar, e.machine, e.create_time, md.alias, e.finished, e.finished_patient, e.all_patient FROM export e, medical_downsample md where md.id = e.query_id and e.medical=1 and e.deleted = 0 AND (e.machine = #{machineId,jdbcType=VARCHAR} or e.machine = 'realpsc')"})
    @ResultType(ExportVO.class)
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "ar", property = "ar", jdbcType = JdbcType.BIT),
            @Result(column = "finished", property = "finished", jdbcType = JdbcType.BIT),
            @Result(column = "machine", property = "machine", jdbcType = JdbcType.VARCHAR),
            @Result(column = "alias", property = "alias", jdbcType = JdbcType.VARCHAR),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
    		@Result(column = "finished_patient",property = "finishedPatient",jdbcType = JdbcType.INTEGER),
    		@Result(column = "all_patient",property = "allPatient",jdbcType = JdbcType.INTEGER)})
    List<ExportVO> selectAllExportJobOnLocalMachine(String machineId);

    @Select({"SELECT (e.finished = 1) OR (e.canceled = 1) FROM export e WHERE e.id = #{jobid,jdbcType=INTEGER}"})
    @ResultType(Boolean.class)
    Boolean isGivenJobIdFinishOrCancel(Integer jobid);

    
    
    @Select({ "select", "id, query_id, ar, layout, finished, canceled, failed, machine, db_type, db_version, ",
		"create_time, update_time, deleted, medical, username, from_db, finished_patient, all_patient, ",
		"patient_list, query_json", "from export", "where id = #{id,jdbcType=INTEGER}" })
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
		@Result(column = "query_id", property = "queryId", jdbcType = JdbcType.INTEGER),
		@Result(column = "ar", property = "ar", jdbcType = JdbcType.BIT),
		@Result(column = "layout", property = "layout", jdbcType = JdbcType.BIT),
		@Result(column = "finished", property = "finished", jdbcType = JdbcType.BIT),
		@Result(column = "canceled", property = "canceled", jdbcType = JdbcType.BIT),
		@Result(column = "failed", property = "failed", jdbcType = JdbcType.BIT),
		@Result(column = "machine", property = "machine", jdbcType = JdbcType.VARCHAR),
		@Result(column = "db_type", property = "dbType", jdbcType = JdbcType.VARCHAR),
		@Result(column = "db_version", property = "dbVersion", jdbcType = JdbcType.VARCHAR),
		@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
		@Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP),
		@Result(column = "deleted", property = "deleted", jdbcType = JdbcType.BIT),
		@Result(column = "medical", property = "medical", jdbcType = JdbcType.BIT),
		@Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
		@Result(column = "from_db", property = "fromDb", jdbcType = JdbcType.VARCHAR),
		@Result(column = "finished_patient", property = "finishedPatient", jdbcType = JdbcType.INTEGER),
		@Result(column = "all_patient", property = "allPatient", jdbcType = JdbcType.INTEGER),
		@Result(column = "patient_list", property = "patientList", jdbcType = JdbcType.LONGVARCHAR),
		@Result(column = "query_json", property = "queryJson", jdbcType = JdbcType.LONGVARCHAR) })
	ExportWithBLOBs selectByPrimaryKey(Integer exportId);

    
    @UpdateProvider(type = ExportSqlProvider.class, method = "updateByPrimaryKeySelective")
	int updateByPrimaryKeySelective(ExportWithBLOBs job);

}
