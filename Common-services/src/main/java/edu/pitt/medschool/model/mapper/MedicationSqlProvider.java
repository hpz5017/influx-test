package edu.pitt.medschool.model.mapper;

import edu.pitt.medschool.model.dto.Medication;

import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;
import edu.pitt.medschool.model.dto.MedicationExample.Criteria;
import edu.pitt.medschool.model.dto.MedicationExample.Criterion;
import edu.pitt.medschool.model.dto.MedicationExample;

public class MedicationSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table medication
	 * @mbg.generated
	 */
	public String countByExample(MedicationExample example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("medication");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table medication
	 * @mbg.generated
	 */
	public String deleteByExample(MedicationExample example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("medication");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table medication
	 * @mbg.generated
	 */
	public String insertSelective(Medication record) {
		SQL sql = new SQL();
		sql.INSERT_INTO("medication");
		if (record.getInfusedVol() != null) {
			sql.VALUES("infused_vol", "#{infusedVol,jdbcType=INTEGER}");
		}
		if (record.getChartDate() != null) {
			sql.VALUES("chart_date", "#{chartDate,jdbcType=TIMESTAMP}");
		}
		if (record.getDrugName() != null) {
			sql.VALUES("drug_name", "#{drugName,jdbcType=VARCHAR}");
		}
		if (record.getDose() != null) {
			sql.VALUES("dose", "#{dose,jdbcType=DOUBLE}");
		}
		if (record.getDoseUnit() != null) {
			sql.VALUES("dose_unit", "#{doseUnit,jdbcType=VARCHAR}");
		}
		if (record.getRate() != null) {
			sql.VALUES("rate", "#{rate,jdbcType=DOUBLE}");
		}
		if (record.getRateUnit() != null) {
			sql.VALUES("rate_unit", "#{rateUnit,jdbcType=VARCHAR}");
		}
		if (record.getOrderedAs() != null) {
			sql.VALUES("ordered_as", "#{orderedAs,jdbcType=VARCHAR}");
		}
		if (record.getRoute() != null) {
			sql.VALUES("route", "#{route,jdbcType=VARCHAR}");
		}
		if (record.getStatus() != null) {
			sql.VALUES("status", "#{status,jdbcType=VARCHAR}");
		}
		if (record.getSite() != null) {
			sql.VALUES("site", "#{site,jdbcType=VARCHAR}");
		}
		if (record.getInfusedVolUnit() != null) {
			sql.VALUES("infused_vol_unit", "#{infusedVolUnit,jdbcType=VARCHAR}");
		}
		if (record.getInfuseInd() != null) {
			sql.VALUES("infuse_ind", "#{infuseInd,jdbcType=INTEGER}");
		}
		if (record.getIvFlag() != null) {
			sql.VALUES("iv_flag", "#{ivFlag,jdbcType=INTEGER}");
		}
		if (record.getBolusFlag() != null) {
			sql.VALUES("bolus_flag", "#{bolusFlag,jdbcType=INTEGER}");
		}
		if (record.getTdripInd() != null) {
			sql.VALUES("tdrip_ind", "#{tdripInd,jdbcType=INTEGER}");
		}
		if (record.getVersion() != null) {
			sql.VALUES("version", "#{version,jdbcType=INTEGER}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table medication
	 * @mbg.generated
	 */
	public String selectByExample(MedicationExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("infused_vol");
		} else {
			sql.SELECT("infused_vol");
		}
		sql.SELECT("id");
		sql.SELECT("chart_date");
		sql.SELECT("drug_name");
		sql.SELECT("dose");
		sql.SELECT("dose_unit");
		sql.SELECT("rate");
		sql.SELECT("rate_unit");
		sql.SELECT("ordered_as");
		sql.SELECT("route");
		sql.SELECT("status");
		sql.SELECT("site");
		sql.SELECT("infused_vol_unit");
		sql.SELECT("infuse_ind");
		sql.SELECT("iv_flag");
		sql.SELECT("bolus_flag");
		sql.SELECT("tdrip_ind");
		sql.SELECT("version");
		sql.FROM("medication");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table medication
	 * @mbg.generated
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		Medication record = (Medication) parameter.get("record");
		MedicationExample example = (MedicationExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("medication");
		if (record.getInfusedVol() != null) {
			sql.SET("infused_vol = #{record.infusedVol,jdbcType=INTEGER}");
		}
		if (record.getId() != null) {
			sql.SET("id = #{record.id,jdbcType=VARCHAR}");
		}
		if (record.getChartDate() != null) {
			sql.SET("chart_date = #{record.chartDate,jdbcType=TIMESTAMP}");
		}
		if (record.getDrugName() != null) {
			sql.SET("drug_name = #{record.drugName,jdbcType=VARCHAR}");
		}
		if (record.getDose() != null) {
			sql.SET("dose = #{record.dose,jdbcType=DOUBLE}");
		}
		if (record.getDoseUnit() != null) {
			sql.SET("dose_unit = #{record.doseUnit,jdbcType=VARCHAR}");
		}
		if (record.getRate() != null) {
			sql.SET("rate = #{record.rate,jdbcType=DOUBLE}");
		}
		if (record.getRateUnit() != null) {
			sql.SET("rate_unit = #{record.rateUnit,jdbcType=VARCHAR}");
		}
		if (record.getOrderedAs() != null) {
			sql.SET("ordered_as = #{record.orderedAs,jdbcType=VARCHAR}");
		}
		if (record.getRoute() != null) {
			sql.SET("route = #{record.route,jdbcType=VARCHAR}");
		}
		if (record.getStatus() != null) {
			sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		}
		if (record.getSite() != null) {
			sql.SET("site = #{record.site,jdbcType=VARCHAR}");
		}
		if (record.getInfusedVolUnit() != null) {
			sql.SET("infused_vol_unit = #{record.infusedVolUnit,jdbcType=VARCHAR}");
		}
		if (record.getInfuseInd() != null) {
			sql.SET("infuse_ind = #{record.infuseInd,jdbcType=INTEGER}");
		}
		if (record.getIvFlag() != null) {
			sql.SET("iv_flag = #{record.ivFlag,jdbcType=INTEGER}");
		}
		if (record.getBolusFlag() != null) {
			sql.SET("bolus_flag = #{record.bolusFlag,jdbcType=INTEGER}");
		}
		if (record.getTdripInd() != null) {
			sql.SET("tdrip_ind = #{record.tdripInd,jdbcType=INTEGER}");
		}
		if (record.getVersion() != null) {
			sql.SET("version = #{record.version,jdbcType=INTEGER}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table medication
	 * @mbg.generated
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("medication");
		sql.SET("infused_vol = #{record.infusedVol,jdbcType=INTEGER}");
		sql.SET("id = #{record.id,jdbcType=VARCHAR}");
		sql.SET("chart_date = #{record.chartDate,jdbcType=TIMESTAMP}");
		sql.SET("drug_name = #{record.drugName,jdbcType=VARCHAR}");
		sql.SET("dose = #{record.dose,jdbcType=DOUBLE}");
		sql.SET("dose_unit = #{record.doseUnit,jdbcType=VARCHAR}");
		sql.SET("rate = #{record.rate,jdbcType=DOUBLE}");
		sql.SET("rate_unit = #{record.rateUnit,jdbcType=VARCHAR}");
		sql.SET("ordered_as = #{record.orderedAs,jdbcType=VARCHAR}");
		sql.SET("route = #{record.route,jdbcType=VARCHAR}");
		sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		sql.SET("site = #{record.site,jdbcType=VARCHAR}");
		sql.SET("infused_vol_unit = #{record.infusedVolUnit,jdbcType=VARCHAR}");
		sql.SET("infuse_ind = #{record.infuseInd,jdbcType=INTEGER}");
		sql.SET("iv_flag = #{record.ivFlag,jdbcType=INTEGER}");
		sql.SET("bolus_flag = #{record.bolusFlag,jdbcType=INTEGER}");
		sql.SET("tdrip_ind = #{record.tdripInd,jdbcType=INTEGER}");
		sql.SET("version = #{record.version,jdbcType=INTEGER}");
		MedicationExample example = (MedicationExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table medication
	 * @mbg.generated
	 */
	protected void applyWhere(SQL sql, MedicationExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}
}