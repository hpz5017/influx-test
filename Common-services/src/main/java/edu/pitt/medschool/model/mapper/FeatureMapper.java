package edu.pitt.medschool.model.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.ResultType;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;

import edu.pitt.medschool.controller.analysis.vo.ColumnVO;
import edu.pitt.medschool.model.dto.Feature;
import edu.pitt.medschool.model.dto.FeatureExample;
import edu.pitt.medschool.model.dto.FeatureKey;

@Mapper
public interface FeatureMapper {

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @SelectProvider(type = FeatureSqlProvider.class, method = "countByExample")
    long countByExample(FeatureExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @DeleteProvider(type = FeatureSqlProvider.class, method = "deleteByExample")
    int deleteByExample(FeatureExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @Delete({ "delete from feature", "where id = #{id,jdbcType=INTEGER}", "and SID = #{sid,jdbcType=VARCHAR}",
            "and SID_Count = #{sidCount,jdbcType=INTEGER}" })
    int deleteByPrimaryKey(FeatureKey key);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @Insert({ "insert into feature (id, SID, ", "SID_Count, type, ", "electrode, freq_low, ", "freq_high, brain_location, ",
            "notes, csv_name, ", "csv_id)", "values (#{id,jdbcType=INTEGER}, #{sid,jdbcType=VARCHAR}, ",
            "#{sidCount,jdbcType=INTEGER}, #{type,jdbcType=VARCHAR}, ",
            "#{electrode,jdbcType=VARCHAR}, #{freqLow,jdbcType=DOUBLE}, ",
            "#{freqHigh,jdbcType=DOUBLE}, #{brainLocation,jdbcType=VARCHAR}, ",
            "#{notes,jdbcType=VARCHAR}, #{csvName,jdbcType=VARCHAR}, ", "#{csvId,jdbcType=INTEGER})" })
    int insert(Feature record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @InsertProvider(type = FeatureSqlProvider.class, method = "insertSelective")
    int insertSelective(Feature record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @SelectProvider(type = FeatureSqlProvider.class, method = "selectByExample")
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "SID", property = "sid", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "SID_Count", property = "sidCount", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR),
            @Result(column = "electrode", property = "electrode", jdbcType = JdbcType.VARCHAR),
            @Result(column = "freq_low", property = "freqLow", jdbcType = JdbcType.DOUBLE),
            @Result(column = "freq_high", property = "freqHigh", jdbcType = JdbcType.DOUBLE),
            @Result(column = "brain_location", property = "brainLocation", jdbcType = JdbcType.VARCHAR),
            @Result(column = "notes", property = "notes", jdbcType = JdbcType.VARCHAR),
            @Result(column = "csv_name", property = "csvName", jdbcType = JdbcType.VARCHAR),
            @Result(column = "csv_id", property = "csvId", jdbcType = JdbcType.INTEGER) })
    List<Feature> selectByExampleWithRowbounds(FeatureExample example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @SelectProvider(type = FeatureSqlProvider.class, method = "selectByExample")
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "SID", property = "sid", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "SID_Count", property = "sidCount", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR),
            @Result(column = "electrode", property = "electrode", jdbcType = JdbcType.VARCHAR),
            @Result(column = "freq_low", property = "freqLow", jdbcType = JdbcType.DOUBLE),
            @Result(column = "freq_high", property = "freqHigh", jdbcType = JdbcType.DOUBLE),
            @Result(column = "brain_location", property = "brainLocation", jdbcType = JdbcType.VARCHAR),
            @Result(column = "notes", property = "notes", jdbcType = JdbcType.VARCHAR),
            @Result(column = "csv_name", property = "csvName", jdbcType = JdbcType.VARCHAR),
            @Result(column = "csv_id", property = "csvId", jdbcType = JdbcType.INTEGER) })
    List<Feature> selectByExample(FeatureExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @Select({ "select", "id, SID, SID_Count, type, electrode, freq_low, freq_high, brain_location, notes, ", "csv_name, csv_id",
            "from feature", "where id = #{id,jdbcType=INTEGER}", "and SID = #{sid,jdbcType=VARCHAR}",
            "and SID_Count = #{sidCount,jdbcType=INTEGER}" })
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "SID", property = "sid", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "SID_Count", property = "sidCount", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR),
            @Result(column = "electrode", property = "electrode", jdbcType = JdbcType.VARCHAR),
            @Result(column = "freq_low", property = "freqLow", jdbcType = JdbcType.DOUBLE),
            @Result(column = "freq_high", property = "freqHigh", jdbcType = JdbcType.DOUBLE),
            @Result(column = "brain_location", property = "brainLocation", jdbcType = JdbcType.VARCHAR),
            @Result(column = "notes", property = "notes", jdbcType = JdbcType.VARCHAR),
            @Result(column = "csv_name", property = "csvName", jdbcType = JdbcType.VARCHAR),
            @Result(column = "csv_id", property = "csvId", jdbcType = JdbcType.INTEGER) })
    Feature selectByPrimaryKey(FeatureKey key);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @UpdateProvider(type = FeatureSqlProvider.class, method = "updateByExampleSelective")
    int updateByExampleSelective(@Param("record") Feature record, @Param("example") FeatureExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @UpdateProvider(type = FeatureSqlProvider.class, method = "updateByExample")
    int updateByExample(@Param("record") Feature record, @Param("example") FeatureExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @UpdateProvider(type = FeatureSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Feature record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table upmc..feature
     * @mbg.generated
     */
    @Update({ "update feature", "set type = #{type,jdbcType=VARCHAR},", "electrode = #{electrode,jdbcType=VARCHAR},",
            "freq_low = #{freqLow,jdbcType=DOUBLE},", "freq_high = #{freqHigh,jdbcType=DOUBLE},",
            "brain_location = #{brainLocation,jdbcType=VARCHAR},", "notes = #{notes,jdbcType=VARCHAR},",
            "csv_name = #{csvName,jdbcType=VARCHAR},", "csv_id = #{csvId,jdbcType=INTEGER}",
            "where id = #{id,jdbcType=INTEGER}", "and SID = #{sid,jdbcType=VARCHAR}",
            "and SID_Count = #{sidCount,jdbcType=INTEGER}" })
    int updateByPrimaryKey(Feature record);

    @Select({ "SELECT DISTINCT(`type`) FROM feature WHERE `type` <> 'time' ORDER BY `type` ASC", })
    @ResultType(String.class)
    @Results({ @Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR) })
    List<String> selectAllMeasures();

    @Select({ "SELECT", "m.suffix AS `column`,", "(CASE", "WHEN m.comment IS NULL THEN CONCAT(ROUND(m.range_low, 3), ' ~ ', ROUND(m.range_high, 3))",
            "ELSE m.comment", "END) AS representation", "FROM feature f, feature_mapping m", "WHERE f.SID = #{electrode} AND f.type = m.type" })
    @Results({ @Result(column = "column", property = "column", jdbcType = JdbcType.VARCHAR),
            @Result(column = "representation", property = "representation", jdbcType = JdbcType.VARCHAR) })
    List<ColumnVO> selectColumnVOsBySet(String electrode);

    @Select({ "SELECT CONCAT(f.SID, m.suffix) AS col", "FROM feature f", "LEFT JOIN feature_mapping m ON f.type = m.type",
            "WHERE f.`type` = '${type}'", "AND (CASE WHEN ${querySid} = TRUE THEN SID IN (${elecString}) ELSE electrode IN (${elecString}) END)",
            "AND (CASE WHEN m.comment IS NULL THEN range_low IN (${colString}) ELSE m.comment IN (${colString}) END)" })
    @ResultType(String.class)
    @Results({ @Result(column = "col", property = "col", jdbcType = JdbcType.VARCHAR) })
    List<String> selectColumnsByAggregationGroupColumns(@Param("type") String type, @Param("elecString") String elecString,
            @Param("colString") String colString, @Param("querySid") boolean querySid);

    @Select({ "SELECT f.id, f.`type`, m.`comment` AS electrode, m.range_low AS freq_low, m.range_high AS freq_high,",
            "f.brain_location, f.notes, m.`comment` AS SID, 1 AS SID_Count FROM feature_mapping AS m, feature AS f",
            "WHERE m.`type` = 'Electrode Signal Quality' AND m.type = f.type" })
    List<Feature> selectByMeasureElectrodeSignalQuality();

    @Select({ "SELECT CONCAT(f.SID, m.suffix) AS col FROM feature f LEFT JOIN feature_mapping m",
            "ON f.type = m.type WHERE f.`type` = 'Electrode Signal Quality' AND m.comment IN (${electrodes});" })
    List<String> selectColumnVOsByElectrodeSignalQualityElectrodes(@Param("electrodes") String electrodes);

    @Select({ "SELECT CONCAT(f.SID, '_1') AS col FROM feature f ",
            "WHERE f.`type` = 'Asymmetry EASI/REASI' AND f.electrode = #{electrode} AND f.notes IN (${notes});" })
    List<String> selectColumnVOsByElectrodeAsymmetry(@Param("notes") String notes, @Param("electrode") String electrode);

    @Select({ "SELECT DISTINCT(electrode) AS e FROM feature WHERE `TYPE` = 'Asymmetry EASI/REASI'" })
    List<String> selectPredefinedKVAsym();

    @Select({ "SELECT notes AS `representation`, sid AS `column` FROM feature WHERE `type` = 'Asymmetry EASI/REASI' AND electrode = #{electrode}" })
    List<ColumnVO> selectColumnVOsAsymmetry(@Param("electrode") String electrode);
}