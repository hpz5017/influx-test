package edu.pitt.medschool.model.mapper;

import edu.pitt.medschool.model.dto.ExportExample.Criteria;
import edu.pitt.medschool.model.dto.ExportExample.Criterion;
import edu.pitt.medschool.model.dto.ExportExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;
import edu.pitt.medschool.model.dto.ExportWithBLOBs;

public class ExportSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	public String countByExample(ExportExample example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("export");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	public String deleteByExample(ExportExample example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("export");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	public String insertSelective(ExportWithBLOBs record) {
		SQL sql = new SQL();
		sql.INSERT_INTO("export");
		if (record.getQueryId() != null) {
			sql.VALUES("query_id", "#{queryId,jdbcType=INTEGER}");
		}
		if (record.getAr() != null) {
			sql.VALUES("ar", "#{ar,jdbcType=BIT}");
		}
		if (record.getLayout() != null) {
			sql.VALUES("layout", "#{layout,jdbcType=BIT}");
		}
		if (record.getFinished() != null) {
			sql.VALUES("finished", "#{finished,jdbcType=BIT}");
		}
		if (record.getCanceled() != null) {
			sql.VALUES("canceled", "#{canceled,jdbcType=BIT}");
		}
		if (record.getFailed() != null) {
			sql.VALUES("failed", "#{failed,jdbcType=BIT}");
		}
		if (record.getMachine() != null) {
			sql.VALUES("machine", "#{machine,jdbcType=VARCHAR}");
		}
		if (record.getDbType() != null) {
			sql.VALUES("db_type", "#{dbType,jdbcType=VARCHAR}");
		}
		if (record.getDbVersion() != null) {
			sql.VALUES("db_version", "#{dbVersion,jdbcType=VARCHAR}");
		}
		if (record.getCreateTime() != null) {
			sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdateTime() != null) {
			sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
		}
		if (record.getDeleted() != null) {
			sql.VALUES("deleted", "#{deleted,jdbcType=BIT}");
		}
		if (record.getMedical() != null) {
			sql.VALUES("medical", "#{medical,jdbcType=BIT}");
		}
		if (record.getUsername() != null) {
			sql.VALUES("username", "#{username,jdbcType=VARCHAR}");
		}
		if (record.getFinishedPatient() != null) {
			sql.VALUES("finished_patient", "#{finishedPatient,jdbcType=INTEGER}");
		}
		if (record.getAllPatient() != null) {
			sql.VALUES("all_patient", "#{allPatient,jdbcType=INTEGER}");
		}
		if (record.getFromDb() != null) {
			sql.VALUES("from_db", "#{fromDb,jdbcType=VARCHAR}");
		}
		if (record.getPatientList() != null) {
			sql.VALUES("patient_list", "#{patientList,jdbcType=LONGVARCHAR}");
		}
		if (record.getQueryJson() != null) {
			sql.VALUES("query_json", "#{queryJson,jdbcType=LONGVARCHAR}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	public String selectByExampleWithBLOBs(ExportExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("id");
		} else {
			sql.SELECT("id");
		}
		sql.SELECT("query_id");
		sql.SELECT("ar");
		sql.SELECT("layout");
		sql.SELECT("finished");
		sql.SELECT("canceled");
		sql.SELECT("failed");
		sql.SELECT("machine");
		sql.SELECT("db_type");
		sql.SELECT("db_version");
		sql.SELECT("create_time");
		sql.SELECT("update_time");
		sql.SELECT("deleted");
		sql.SELECT("medical");
		sql.SELECT("username");
		sql.SELECT("finished_patient");
		sql.SELECT("all_patient");
		sql.SELECT("from_db");
		sql.SELECT("patient_list");
		sql.SELECT("query_json");
		sql.FROM("export");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	public String selectByExample(ExportExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("id");
		} else {
			sql.SELECT("id");
		}
		sql.SELECT("query_id");
		sql.SELECT("ar");
		sql.SELECT("layout");
		sql.SELECT("finished");
		sql.SELECT("canceled");
		sql.SELECT("failed");
		sql.SELECT("machine");
		sql.SELECT("db_type");
		sql.SELECT("db_version");
		sql.SELECT("create_time");
		sql.SELECT("update_time");
		sql.SELECT("deleted");
		sql.SELECT("medical");
		sql.SELECT("username");
		sql.SELECT("finished_patient");
		sql.SELECT("all_patient");
		sql.SELECT("from_db");
		sql.FROM("export");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		ExportWithBLOBs record = (ExportWithBLOBs) parameter.get("record");
		ExportExample example = (ExportExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("export");
		if (record.getId() != null) {
			sql.SET("id = #{record.id,jdbcType=INTEGER}");
		}
		if (record.getQueryId() != null) {
			sql.SET("query_id = #{record.queryId,jdbcType=INTEGER}");
		}
		if (record.getAr() != null) {
			sql.SET("ar = #{record.ar,jdbcType=BIT}");
		}
		if (record.getLayout() != null) {
			sql.SET("layout = #{record.layout,jdbcType=BIT}");
		}
		if (record.getFinished() != null) {
			sql.SET("finished = #{record.finished,jdbcType=BIT}");
		}
		if (record.getCanceled() != null) {
			sql.SET("canceled = #{record.canceled,jdbcType=BIT}");
		}
		if (record.getFailed() != null) {
			sql.SET("failed = #{record.failed,jdbcType=BIT}");
		}
		if (record.getMachine() != null) {
			sql.SET("machine = #{record.machine,jdbcType=VARCHAR}");
		}
		if (record.getDbType() != null) {
			sql.SET("db_type = #{record.dbType,jdbcType=VARCHAR}");
		}
		if (record.getDbVersion() != null) {
			sql.SET("db_version = #{record.dbVersion,jdbcType=VARCHAR}");
		}
		if (record.getCreateTime() != null) {
			sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdateTime() != null) {
			sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
		}
		if (record.getDeleted() != null) {
			sql.SET("deleted = #{record.deleted,jdbcType=BIT}");
		}
		if (record.getMedical() != null) {
			sql.SET("medical = #{record.medical,jdbcType=BIT}");
		}
		if (record.getUsername() != null) {
			sql.SET("username = #{record.username,jdbcType=VARCHAR}");
		}
		if (record.getFinishedPatient() != null) {
			sql.SET("finished_patient = #{record.finishedPatient,jdbcType=INTEGER}");
		}
		if (record.getAllPatient() != null) {
			sql.SET("all_patient = #{record.allPatient,jdbcType=INTEGER}");
		}
		if (record.getFromDb() != null) {
			sql.SET("from_db = #{record.fromDb,jdbcType=VARCHAR}");
		}
		if (record.getPatientList() != null) {
			sql.SET("patient_list = #{record.patientList,jdbcType=LONGVARCHAR}");
		}
		if (record.getQueryJson() != null) {
			sql.SET("query_json = #{record.queryJson,jdbcType=LONGVARCHAR}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("export");
		sql.SET("id = #{record.id,jdbcType=INTEGER}");
		sql.SET("query_id = #{record.queryId,jdbcType=INTEGER}");
		sql.SET("ar = #{record.ar,jdbcType=BIT}");
		sql.SET("layout = #{record.layout,jdbcType=BIT}");
		sql.SET("finished = #{record.finished,jdbcType=BIT}");
		sql.SET("canceled = #{record.canceled,jdbcType=BIT}");
		sql.SET("failed = #{record.failed,jdbcType=BIT}");
		sql.SET("machine = #{record.machine,jdbcType=VARCHAR}");
		sql.SET("db_type = #{record.dbType,jdbcType=VARCHAR}");
		sql.SET("db_version = #{record.dbVersion,jdbcType=VARCHAR}");
		sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
		sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
		sql.SET("deleted = #{record.deleted,jdbcType=BIT}");
		sql.SET("medical = #{record.medical,jdbcType=BIT}");
		sql.SET("username = #{record.username,jdbcType=VARCHAR}");
		sql.SET("finished_patient = #{record.finishedPatient,jdbcType=INTEGER}");
		sql.SET("all_patient = #{record.allPatient,jdbcType=INTEGER}");
		sql.SET("from_db = #{record.fromDb,jdbcType=VARCHAR}");
		sql.SET("patient_list = #{record.patientList,jdbcType=LONGVARCHAR}");
		sql.SET("query_json = #{record.queryJson,jdbcType=LONGVARCHAR}");
		ExportExample example = (ExportExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("export");
		sql.SET("id = #{record.id,jdbcType=INTEGER}");
		sql.SET("query_id = #{record.queryId,jdbcType=INTEGER}");
		sql.SET("ar = #{record.ar,jdbcType=BIT}");
		sql.SET("layout = #{record.layout,jdbcType=BIT}");
		sql.SET("finished = #{record.finished,jdbcType=BIT}");
		sql.SET("canceled = #{record.canceled,jdbcType=BIT}");
		sql.SET("failed = #{record.failed,jdbcType=BIT}");
		sql.SET("machine = #{record.machine,jdbcType=VARCHAR}");
		sql.SET("db_type = #{record.dbType,jdbcType=VARCHAR}");
		sql.SET("db_version = #{record.dbVersion,jdbcType=VARCHAR}");
		sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
		sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
		sql.SET("deleted = #{record.deleted,jdbcType=BIT}");
		sql.SET("medical = #{record.medical,jdbcType=BIT}");
		sql.SET("username = #{record.username,jdbcType=VARCHAR}");
		sql.SET("finished_patient = #{record.finishedPatient,jdbcType=INTEGER}");
		sql.SET("all_patient = #{record.allPatient,jdbcType=INTEGER}");
		sql.SET("from_db = #{record.fromDb,jdbcType=VARCHAR}");
		ExportExample example = (ExportExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	public String updateByPrimaryKeySelective(ExportWithBLOBs record) {
		SQL sql = new SQL();
		sql.UPDATE("export");
		if (record.getQueryId() != null) {
			sql.SET("query_id = #{queryId,jdbcType=INTEGER}");
		}
		if (record.getAr() != null) {
			sql.SET("ar = #{ar,jdbcType=BIT}");
		}
		if (record.getLayout() != null) {
			sql.SET("layout = #{layout,jdbcType=BIT}");
		}
		if (record.getFinished() != null) {
			sql.SET("finished = #{finished,jdbcType=BIT}");
		}
		if (record.getCanceled() != null) {
			sql.SET("canceled = #{canceled,jdbcType=BIT}");
		}
		if (record.getFailed() != null) {
			sql.SET("failed = #{failed,jdbcType=BIT}");
		}
		if (record.getMachine() != null) {
			sql.SET("machine = #{machine,jdbcType=VARCHAR}");
		}
		if (record.getDbType() != null) {
			sql.SET("db_type = #{dbType,jdbcType=VARCHAR}");
		}
		if (record.getDbVersion() != null) {
			sql.SET("db_version = #{dbVersion,jdbcType=VARCHAR}");
		}
		if (record.getCreateTime() != null) {
			sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdateTime() != null) {
			sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
		}
		if (record.getDeleted() != null) {
			sql.SET("deleted = #{deleted,jdbcType=BIT}");
		}
		if (record.getMedical() != null) {
			sql.SET("medical = #{medical,jdbcType=BIT}");
		}
		if (record.getUsername() != null) {
			sql.SET("username = #{username,jdbcType=VARCHAR}");
		}
		if (record.getFromDb() != null) {
			sql.SET("from_db = #{fromDb,jdbcType=VARCHAR}");
		}
		if (record.getFinishedPatient() != null) {
			sql.SET("finished_patient = #{finishedPatient,jdbcType=INTEGER}");
		}
		if (record.getAllPatient() != null) {
			sql.SET("all_patient = #{allPatient,jdbcType=INTEGER}");
		}
		if (record.getPatientList() != null) {
			sql.SET("patient_list = #{patientList,jdbcType=LONGVARCHAR}");
		}
		if (record.getQueryJson() != null) {
			sql.SET("query_json = #{queryJson,jdbcType=LONGVARCHAR}");
		}
		sql.WHERE("id = #{id,jdbcType=INTEGER}");
		return sql.toString();
	}

	
	
	
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table export
	 * @mbg.generated
	 */
	protected void applyWhere(SQL sql, ExportExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}
}