package edu.pitt.medschool.model.mapper;

import edu.pitt.medschool.model.dto.AggregationDb;
import edu.pitt.medschool.model.dto.AggregationDbExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;

@Mapper
public interface AggregationDbMapper {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@SelectProvider(type = AggregationDbSqlProvider.class, method = "countByExample")
	long countByExample(AggregationDbExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@Delete({ "delete from aggregation_db", "where id = #{id,jdbcType=INTEGER}" })
	int deleteByPrimaryKey(Integer id);
	
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@DeleteProvider(type = AggregationDbSqlProvider.class, method = "deleteByExample")
	int deleteByExample(AggregationDbExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@Insert({ "insert into aggregation_db (version, create_time, ", "status, total, finished, ",
			"arType, time_cost, nday, ", "comment, db_size, ", "pid_list)",
			"values (#{version,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, ",
			"#{status,jdbcType=VARCHAR}, #{total,jdbcType=INTEGER}, #{finished,jdbcType=INTEGER}, ",
			"#{artype,jdbcType=BIT}, #{timeCost,jdbcType=VARCHAR}, #{nday,jdbcType=INTEGER}, ",
			"#{comment,jdbcType=VARCHAR}, #{dbSize,jdbcType=INTEGER}, ", "#{pidList,jdbcType=LONGVARCHAR})" })
	@SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Integer.class)
	int insert(AggregationDb record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@InsertProvider(type = AggregationDbSqlProvider.class, method = "insertSelective")
	@SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Integer.class)
	int insertSelective(AggregationDb record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@SelectProvider(type = AggregationDbSqlProvider.class, method = "selectByExampleWithBLOBs")
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER),
			@Result(column = "version", property = "version", jdbcType = JdbcType.INTEGER),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "status", property = "status", jdbcType = JdbcType.VARCHAR),
			@Result(column = "total", property = "total", jdbcType = JdbcType.INTEGER),
			@Result(column = "finished", property = "finished", jdbcType = JdbcType.INTEGER),
			@Result(column = "arType", property = "artype", jdbcType = JdbcType.BIT),
			@Result(column = "time_cost", property = "timeCost", jdbcType = JdbcType.VARCHAR),
			@Result(column = "nday", property = "nday", jdbcType = JdbcType.INTEGER),
			@Result(column = "comment", property = "comment", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_size", property = "dbSize", jdbcType = JdbcType.INTEGER),
			@Result(column = "pid_list", property = "pidList", jdbcType = JdbcType.LONGVARCHAR) })
	List<AggregationDb> selectByExampleWithBLOBsWithRowbounds(AggregationDbExample example, RowBounds rowBounds);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@SelectProvider(type = AggregationDbSqlProvider.class, method = "selectByExampleWithBLOBs")
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER),
			@Result(column = "version", property = "version", jdbcType = JdbcType.INTEGER),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "status", property = "status", jdbcType = JdbcType.VARCHAR),
			@Result(column = "total", property = "total", jdbcType = JdbcType.INTEGER),
			@Result(column = "finished", property = "finished", jdbcType = JdbcType.INTEGER),
			@Result(column = "arType", property = "artype", jdbcType = JdbcType.BIT),
			@Result(column = "time_cost", property = "timeCost", jdbcType = JdbcType.VARCHAR),
			@Result(column = "nday", property = "nday", jdbcType = JdbcType.INTEGER),
			@Result(column = "comment", property = "comment", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_size", property = "dbSize", jdbcType = JdbcType.INTEGER),
			@Result(column = "pid_list", property = "pidList", jdbcType = JdbcType.LONGVARCHAR) })
	List<AggregationDb> selectByExampleWithBLOBs(AggregationDbExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@SelectProvider(type = AggregationDbSqlProvider.class, method = "selectByExample")
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER),
			@Result(column = "version", property = "version", jdbcType = JdbcType.INTEGER),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "status", property = "status", jdbcType = JdbcType.VARCHAR),
			@Result(column = "total", property = "total", jdbcType = JdbcType.INTEGER),
			@Result(column = "finished", property = "finished", jdbcType = JdbcType.INTEGER),
			@Result(column = "arType", property = "artype", jdbcType = JdbcType.BIT),
			@Result(column = "time_cost", property = "timeCost", jdbcType = JdbcType.VARCHAR),
			@Result(column = "nday", property = "nday", jdbcType = JdbcType.INTEGER),
			@Result(column = "pid_list", property = "pidList", jdbcType = JdbcType.LONGVARCHAR),
			@Result(column = "comment", property = "comment", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_size", property = "dbSize", jdbcType = JdbcType.INTEGER) })
	List<AggregationDb> selectByExampleWithRowbounds(AggregationDbExample example, RowBounds rowBounds);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@SelectProvider(type = AggregationDbSqlProvider.class, method = "selectByExample")
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER),
			@Result(column = "version", property = "version", jdbcType = JdbcType.INTEGER),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "status", property = "status", jdbcType = JdbcType.VARCHAR),
			@Result(column = "total", property = "total", jdbcType = JdbcType.INTEGER),
			@Result(column = "finished", property = "finished", jdbcType = JdbcType.INTEGER),
			@Result(column = "arType", property = "artype", jdbcType = JdbcType.BIT),
			@Result(column = "time_cost", property = "timeCost", jdbcType = JdbcType.VARCHAR),
			@Result(column = "pid_list", property = "pidList", jdbcType = JdbcType.LONGVARCHAR),
			@Result(column = "nday", property = "nday", jdbcType = JdbcType.INTEGER),
			@Result(column = "comment", property = "comment", jdbcType = JdbcType.VARCHAR),
			@Result(column = "db_size", property = "dbSize", jdbcType = JdbcType.INTEGER) })
	List<AggregationDb> selectByExample(AggregationDbExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@UpdateProvider(type = AggregationDbSqlProvider.class, method = "updateByExampleSelective")
	int updateByExampleSelective(@Param("record") AggregationDb record, @Param("example") AggregationDbExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@UpdateProvider(type = AggregationDbSqlProvider.class, method = "updateByExampleWithBLOBs")
	int updateByExampleWithBLOBs(@Param("record") AggregationDb record, @Param("example") AggregationDbExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@UpdateProvider(type = AggregationDbSqlProvider.class, method = "updateByExample")
	int updateByExample(@Param("record") AggregationDb record, @Param("example") AggregationDbExample example);

	@UpdateProvider(type = AggregationDbSqlProvider.class, method = "updateByPrimaryKeySelective")
	int updateByPrimaryKeySelective(AggregationDb record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@Update({ "update aggregation_db", "set version = #{version,jdbcType=INTEGER},",
			"create_time = #{createTime,jdbcType=TIMESTAMP},", "status = #{status,jdbcType=VARCHAR},",
			"total = #{total,jdbcType=INTEGER},", "finished = #{finished,jdbcType=INTEGER},",
			"arType = #{artype,jdbcType=BIT},", "time_cost = #{timeCost,jdbcType=VARCHAR},",
			"nday = #{nday,jdbcType=INTEGER},", "pid_list = #{pidList,jdbcType=LONGVARCHAR}",
			"db_size = #{dbSize,jdbcType=INTEGER}", "comment = #{comment,jdbcType=VARCHAR}",
			"where id = #{id,jdbcType=INTEGER}" })
	int updateByPrimaryKeyWithBLOBs(AggregationDb record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@Update({ "update aggregation_db", "set version = #{version,jdbcType=INTEGER},",
			"create_time = #{createTime,jdbcType=TIMESTAMP},", "status = #{status,jdbcType=VARCHAR},",
			"total = #{total,jdbcType=INTEGER},", "finished = #{finished,jdbcType=INTEGER},",
			"arType = #{artype,jdbcType=BIT},", "time_cost = #{timeCost,jdbcType=VARCHAR},", 
			"db_size = #{dbSize,jdbcType=INTEGER}", "pid_list = #{pidList,jdbcType=LONGVARCHAR}", 
			"comment = #{comment,jdbcType=VARCHAR}", "nday = #{nday,jdbcType=INTEGER}", 
			"where id = #{id,jdbcType=INTEGER}" })
	int updateByPrimaryKey(AggregationDb record);
	
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table aggregation_db
	 * @mbg.generated
	 */
	@Select({ "select", "id, version, create_time, status, total, finished, arType, time_cost, nday, db_size, comment, ", "pid_list",
			"from aggregation_db", "where id = #{id,jdbcType=INTEGER}" })
	@Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
			@Result(column = "version", property = "version", jdbcType = JdbcType.INTEGER),
			@Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "status", property = "status", jdbcType = JdbcType.VARCHAR),
			@Result(column = "total", property = "total", jdbcType = JdbcType.INTEGER),
			@Result(column = "finished", property = "finished", jdbcType = JdbcType.INTEGER),
			@Result(column = "arType", property = "artype", jdbcType = JdbcType.BIT),
			@Result(column = "time_cost", property = "timeCost", jdbcType = JdbcType.VARCHAR),
			@Result(column = "nday", property = "nday", jdbcType = JdbcType.INTEGER),
			@Result(column = "pid_list", property = "pidList", jdbcType = JdbcType.LONGVARCHAR),
			@Result(column = "db_size", property = "dbSize", jdbcType = JdbcType.INTEGER),
			@Result(column = "comment", property = "comment", jdbcType = JdbcType.VARCHAR)})
	AggregationDb selectByPrimaryKey(Integer id);
}